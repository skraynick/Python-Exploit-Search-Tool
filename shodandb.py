# Import the Shodan Library
import shodan
import time
import pickle


class ShodanDbSearch:
    """Searches the shodan database for exploits that are in shodan, msf and exploitd"""

    def __init__(self, search):

        # Attributes

        self.configFile = "config.dat"
        self.dataList = []
        self.resultsList = None
        self.API_KEY = ""
        self.load_data()
        self.API_KEY = self.dataList[0]
        self.search = search
        self.api = shodan.Shodan(self.API_KEY)

    def load_data(self):
        try:
            with open(self.configFile, mode="rb") as myFile:

                self.dataList = pickle.load(myFile)
        except:

            self.get_api_key()

    def get_api_key(self):

        global getKey
        accepted = False

        while not accepted:

            if self.API_KEY == "":

                print("API Key not given - enter below!")
                print("If you have not got an API Key then visit - www.shodanhq.com")

                try:

                    getKey = input("Enter API Key: ")
                    self.API_KEY = getKey

                    self.dataList.append(self.API_KEY)
                    # write the data to config file for persistence

                    with open(self.configFile, mode="wb") as myFile:
                        pickle.dump(self.dataList, myFile)

                    accepted = True
                except:
                    print("Please enter a correct API Key")
        if accepted:
            self.API_KEY = getKey

    def search_shodan(self):
        search = self.search
        print()
        print("Please wait this may take a while..")

        search_results = self.api.exploits.search(search)

        key_data_list = []

        data_results = search_results['matches']

        # Common Variables

        total_results = int(search_results['total'])

        print()

        print("[+] {0} exploits found!".format(str(total_results)))

        time.sleep(2)

        key_data_list.append(total_results)

        # Too much data to output at once format into pages
        results_pages_list = []

        if total_results > 10:

            total_pages = int(total_results // 10)

            if (total_results % 10) > 0:
                total_pages += 1

            for page in range(1, total_pages + 1):

                results_list = []

                # Counter Variables for creating lists for each page

                end_num = (page * 10)

                start_num = (page * 10) - 10

                # If last page use the total pages variable as the end number

                if end_num > total_results:
                    end_num = total_results

                # Create lists

                results_list = data_results[start_num:end_num]

                results_pages_list.append(results_list)


        # 10 or less results = one page

        else:

            end_num = total_results

            start_num = 0

            # Create lists

            results_list = data_results[start_num:end_num]

            results_pages_list.append(results_list)

        return results_pages_list, key_data_list


if __name__ == "__main__":
    new = ShodanDbSearch("hello")